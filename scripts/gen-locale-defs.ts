import * as path from "path"
import * as ts from "typescript"
import * as ConfigParser from "configparser"
import * as fs from "fs"
import { format } from "prettier"

function toPascalCase(str: string): string {
  return str
    .split(/[^a-zA-Z0-9]/)
    .map((s) => s.charAt(0).toUpperCase() + s.slice(1))
    .join("")
}

// function convertLocaleValue(value: string): string {
//   // replace non alphanumeric characters with underscore
//   let result = value.replace(/[^a-zA-Z0-9]/g, "_")
//
//   // get rid of all multi-underscores
//   result = result.replace(/_+/g, "_")
//
//   // get rid of all trailing underscores.
//   result = result.replace(/_$/, "")
//   // get rid of all leading underscores.
//   result = result.replace(/^_/, "")
//
//   // limit length to 40 chars
//   if (result.length > 40) {
//     const lastUnderscore = result.lastIndexOf("_", 40)
//     if (lastUnderscore > 0) {
//       result = result.substring(0, lastUnderscore)
//     }
//   }
//
//   return result
// }

const source = path.join(__dirname, "../mod/locale/en/en.cfg")
const config: ConfigParser.default = new (ConfigParser as any)()
config.read(source)

const enumDeclarations: ts.EnumDeclaration[] = []

const sections = config.sections()

for (const section of sections) {
  const items = config.items(section)
  const statements: ts.EnumMember[] = []
  for (const [key, value] of Object.entries(items)) {
    const propName = toPascalCase(key)
    const valueName = `${section}.${key}`
    const member = ts.factory.createEnumMember(propName, ts.factory.createStringLiteral(valueName))
    ts.addSyntheticLeadingComment(member, ts.SyntaxKind.MultiLineCommentTrivia, `* ${value} `, true)
    statements.push(member)
  }

  // remove part before first dot, if any
  let sectionName = section
  const firstDot = sectionName.indexOf(".")
  if (firstDot > -1) {
    sectionName = sectionName.substring(firstDot + 1)
  }

  const decl = ts.factory.createEnumDeclaration(
    undefined,
    [
      ts.factory.createModifier(ts.SyntaxKind.ExportKeyword),
      ts.factory.createModifier(ts.SyntaxKind.DeclareKeyword),
      ts.factory.createModifier(ts.SyntaxKind.ConstKeyword),
    ],
    "L_" + toPascalCase(sectionName),
    statements,
  )
  enumDeclarations.push(decl)
}

const sourceFile = ts.factory.createSourceFile(
  enumDeclarations,
  ts.factory.createToken(ts.SyntaxKind.EndOfFileToken),
  ts.NodeFlags.None,
)

const printer = ts.createPrinter()
const printResult = printer.printNode(ts.EmitHint.Unspecified, sourceFile, sourceFile)
const header = "// Generated by gen-locale-defs.ts\n\n"
const result = format(header + printResult, {
  parser: "typescript",
  printWidth: 120,
  semi: false,
})

const outfile = path.join(__dirname, "../src/locale.d.ts")
fs.writeFileSync(outfile, result)
