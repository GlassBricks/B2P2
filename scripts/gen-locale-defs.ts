import * as fs from "fs"
import * as path from "path"
import { format } from "prettier"
import * as ts from "typescript"
import assert = require("assert")

function toPascalCase(str: string): string {
  return str
    .split(/[^a-zA-Z0-9]/)
    .map((s) => s.charAt(0).toUpperCase() + s.slice(1))
    .join("")
}

const source = path.join(__dirname, "../mod/locale/en/en.cfg")
function parseConfig(file: string): Record<string, Record<string, string>> {
  // parse config
  const result: Record<string, Record<string, string>> = {}
  let currentContent: Record<string, string> = {}

  const lines = fs.readFileSync(file, "utf8").split("\n")
  for (const line of lines) {
    if (line.startsWith("#")) continue
    if (line.startsWith("[")) {
      assert(line.endsWith("]"))
      const key = line.slice(1, -1)
      result[key] = currentContent = {}
    }
    if (line.includes("=")) {
      const index = line.indexOf("=")
      const key = line.slice(0, index)
      currentContent[key] = line.slice(index + 1)
    }
  }

  return result
}

const config = parseConfig(source)

const enumDeclarations: ts.EnumDeclaration[] = []

for (const [section, items] of Object.entries(config)) {
  const statements: ts.EnumMember[] = []
  for (const [key, value] of Object.entries(items)) {
    const propName = toPascalCase(key)
    const valueName = `${section}.${key}`
    const member = ts.factory.createEnumMember(propName, ts.factory.createStringLiteral(valueName))
    ts.addSyntheticLeadingComment(member, ts.SyntaxKind.MultiLineCommentTrivia, `* ${value} `, true)
    statements.push(member)
  }

  // remove part before first dot, if any
  let sectionName = section
  const firstDot = sectionName.indexOf(".")
  if (firstDot > -1) {
    sectionName = sectionName.substring(firstDot + 1)
  }

  const decl = ts.factory.createEnumDeclaration(
    undefined,
    [
      ts.factory.createModifier(ts.SyntaxKind.ExportKeyword),
      ts.factory.createModifier(ts.SyntaxKind.DeclareKeyword),
      ts.factory.createModifier(ts.SyntaxKind.ConstKeyword),
    ],
    "L_" + toPascalCase(sectionName),
    statements,
  )
  enumDeclarations.push(decl)
}

const sourceFile = ts.factory.createSourceFile(
  enumDeclarations,
  ts.factory.createToken(ts.SyntaxKind.EndOfFileToken),
  ts.NodeFlags.None,
)

const printer = ts.createPrinter()
const printResult = printer.printNode(ts.EmitHint.Unspecified, sourceFile, sourceFile)
const header = "// Generated by gen-locale-defs.ts\n\n"
const result = format(header + printResult, {
  parser: "typescript",
  printWidth: 120,
  semi: false,
})

const outfile = path.join(__dirname, "../src/locale.d.ts")
fs.writeFileSync(outfile, result)
