// This file was auto-generated by scripts/gen-gui-specs.ts. Do not edit directly!

import { MaybeObservable, MaybeState } from "../observable"
import { ElementInteractor } from "./render"
import { Spec } from "./spec"

export interface BaseElementSpec {
  type: GuiElementType
  name?: MaybeObservable<string>
  caption?: MaybeObservable<LocalisedString>
  tooltip?: MaybeObservable<LocalisedString>
  enabled?: MaybeObservable<boolean>
  visible?: MaybeObservable<boolean>
  ignored_by_interaction?: MaybeObservable<boolean>
  style?: string
  tags?: Tags
  anchor?: MaybeObservable<GuiAnchor | undefined>
  location?: MaybeObservable<GuiLocation | undefined>
  children?: Spec[]
}

export interface ChooseElemButtonElementSpec extends BaseElementSpec {
  type: "choose-elem-button"
  elem_type: ChooseElemButtonType
  elem_filters?: MaybeObservable<ChooseElemButtonFilters[this["elem_type"]] | undefined>
  elem_value?: MaybeState<(this["elem_type"] extends "signal" ? SignalID : string) | undefined>
  locked?: MaybeObservable<boolean>
  on_gui_click?: (event: OnGuiClickEvent) => void
  on_gui_opened?: (event: OnGuiOpenedEvent) => void
  on_gui_closed?: (event: OnGuiClosedEvent) => void
  onCreate?: (element: ChooseElemButtonGuiElementMembers, interactor: ElementInteractor) => void
  styleMod?: BaseStyleMod
}

export interface DropDownElementSpec extends BaseElementSpec {
  type: "drop-down"
  items?: MaybeObservable<LocalisedString[]>
  selected_index?: MaybeState<uint>
  on_gui_click?: (event: OnGuiClickEvent) => void
  on_gui_opened?: (event: OnGuiOpenedEvent) => void
  on_gui_closed?: (event: OnGuiClosedEvent) => void
  onCreate?: (element: DropDownGuiElementMembers, interactor: ElementInteractor) => void
  styleMod?: BaseStyleMod
}

export interface EmptyWidgetElementSpec extends BaseElementSpec {
  type: "empty-widget"
  drag_target?: MaybeObservable<LuaGuiElement | undefined>
  on_gui_click?: (event: OnGuiClickEvent) => void
  on_gui_opened?: (event: OnGuiOpenedEvent) => void
  on_gui_closed?: (event: OnGuiClosedEvent) => void
  onCreate?: (element: EmptyWidgetGuiElementMembers, interactor: ElementInteractor) => void
  styleMod?: BaseStyleMod
}

export interface EntityPreviewElementSpec extends BaseElementSpec {
  type: "entity-preview"
  entity?: MaybeObservable<LuaEntity | undefined>
  on_gui_click?: (event: OnGuiClickEvent) => void
  on_gui_opened?: (event: OnGuiOpenedEvent) => void
  on_gui_closed?: (event: OnGuiClosedEvent) => void
  onCreate?: (element: EntityPreviewGuiElementMembers, interactor: ElementInteractor) => void
  styleMod?: BaseStyleMod
}

export interface ListBoxElementSpec extends BaseElementSpec {
  type: "list-box"
  items?: MaybeObservable<LocalisedString[]>
  selected_index?: MaybeState<uint>
  on_gui_click?: (event: OnGuiClickEvent) => void
  on_gui_opened?: (event: OnGuiOpenedEvent) => void
  on_gui_closed?: (event: OnGuiClosedEvent) => void
  onCreate?: (element: ListBoxGuiElementMembers, interactor: ElementInteractor) => void
  styleMod?: BaseStyleMod
}

export interface ScrollPaneElementSpec extends BaseElementSpec {
  type: "scroll-pane"
  horizontal_scroll_policy?: MaybeObservable<
    "auto" | "never" | "always" | "auto-and-reserve-space" | "dont-show-but-allow-scrolling"
  >
  vertical_scroll_policy?: MaybeObservable<
    "auto" | "never" | "always" | "auto-and-reserve-space" | "dont-show-but-allow-scrolling"
  >
  on_gui_click?: (event: OnGuiClickEvent) => void
  on_gui_opened?: (event: OnGuiOpenedEvent) => void
  on_gui_closed?: (event: OnGuiClosedEvent) => void
  onCreate?: (element: ScrollPaneGuiElementMembers, interactor: ElementInteractor) => void
  styleMod?: ScrollPaneStyleMod
}

export interface SpriteButtonElementSpec extends BaseElementSpec {
  type: "sprite-button"
  sprite?: MaybeObservable<SpritePath>
  hovered_sprite?: MaybeObservable<SpritePath>
  clicked_sprite?: MaybeObservable<SpritePath>
  number?: MaybeObservable<double | undefined>
  show_percent_for_small_numbers?: MaybeObservable<boolean>
  mouse_button_filter?: MaybeObservable<MouseButtonFlags>
  on_gui_click?: (event: OnGuiClickEvent) => void
  on_gui_opened?: (event: OnGuiOpenedEvent) => void
  on_gui_closed?: (event: OnGuiClosedEvent) => void
  onCreate?: (element: SpriteButtonGuiElementMembers, interactor: ElementInteractor) => void
  styleMod?: BaseStyleMod
}

export interface TabbedPaneElementSpec extends BaseElementSpec {
  type: "tabbed-pane"
  selected_tab_index?: MaybeState<uint | undefined>
  on_gui_click?: (event: OnGuiClickEvent) => void
  on_gui_opened?: (event: OnGuiOpenedEvent) => void
  on_gui_closed?: (event: OnGuiClosedEvent) => void
  onCreate?: (element: TabbedPaneGuiElementMembers, interactor: ElementInteractor) => void
  styleMod?: TabbedPaneStyleMod
}

export interface TextBoxElementSpec extends BaseElementSpec {
  type: "text-box"
  text?: MaybeState<string>
  clear_and_focus_on_right_click?: MaybeObservable<boolean>
  selectable?: MaybeObservable<boolean>
  word_wrap?: MaybeObservable<boolean>
  read_only?: MaybeObservable<boolean>
  on_gui_click?: (event: OnGuiClickEvent) => void
  on_gui_confirmed?: (event: OnGuiConfirmedEvent) => void
  on_gui_opened?: (event: OnGuiOpenedEvent) => void
  on_gui_closed?: (event: OnGuiClosedEvent) => void
  onCreate?: (element: TextBoxGuiElementMembers, interactor: ElementInteractor) => void
  styleMod?: TextBoxStyleMod
}

export interface ButtonElementSpec extends BaseElementSpec {
  type: "button"
  mouse_button_filter?: MaybeObservable<MouseButtonFlags>
  on_gui_click?: (event: OnGuiClickEvent) => void
  on_gui_opened?: (event: OnGuiOpenedEvent) => void
  on_gui_closed?: (event: OnGuiClosedEvent) => void
  onCreate?: (element: ButtonGuiElementMembers, interactor: ElementInteractor) => void
  styleMod?: ButtonStyleMod
}

export interface CameraElementSpec extends BaseElementSpec {
  type: "camera"
  position: MaybeObservable<MapPosition>
  surface_index?: MaybeObservable<SurfaceIndex>
  zoom?: MaybeObservable<double>
  entity?: MaybeObservable<LuaEntity | undefined>
  on_gui_click?: (event: OnGuiClickEvent) => void
  on_gui_opened?: (event: OnGuiOpenedEvent) => void
  on_gui_closed?: (event: OnGuiClosedEvent) => void
  onCreate?: (element: CameraGuiElementMembers, interactor: ElementInteractor) => void
  styleMod?: BaseStyleMod
}

export interface CheckboxElementSpec extends BaseElementSpec {
  type: "checkbox"
  state: MaybeState<boolean>
  on_gui_click?: (event: OnGuiClickEvent) => void
  on_gui_opened?: (event: OnGuiOpenedEvent) => void
  on_gui_closed?: (event: OnGuiClosedEvent) => void
  onCreate?: (element: CheckboxGuiElementMembers, interactor: ElementInteractor) => void
  styleMod?: BaseStyleMod
}

export interface FlowElementSpec extends BaseElementSpec {
  type: "flow"
  direction?: "horizontal" | "vertical"
  drag_target?: MaybeObservable<LuaGuiElement | undefined>
  on_gui_click?: (event: OnGuiClickEvent) => void
  on_gui_opened?: (event: OnGuiOpenedEvent) => void
  on_gui_closed?: (event: OnGuiClosedEvent) => void
  onCreate?: (element: FlowGuiElementMembers, interactor: ElementInteractor) => void
  styleMod?: FlowStyleMod
}

export interface FrameElementSpec extends BaseElementSpec {
  type: "frame"
  direction?: "horizontal" | "vertical"
  auto_center?: MaybeObservable<boolean>
  drag_target?: MaybeObservable<LuaGuiElement | undefined>
  on_gui_click?: (event: OnGuiClickEvent) => void
  on_gui_location_changed?: (event: OnGuiLocationChangedEvent) => void
  on_gui_opened?: (event: OnGuiOpenedEvent) => void
  on_gui_closed?: (event: OnGuiClosedEvent) => void
  onCreate?: (element: FrameGuiElementMembers, interactor: ElementInteractor) => void
  styleMod?: FrameStyleMod
}

export interface LabelElementSpec extends BaseElementSpec {
  type: "label"
  drag_target?: MaybeObservable<LuaGuiElement | undefined>
  on_gui_click?: (event: OnGuiClickEvent) => void
  on_gui_opened?: (event: OnGuiOpenedEvent) => void
  on_gui_closed?: (event: OnGuiClosedEvent) => void
  onCreate?: (element: LabelGuiElementMembers, interactor: ElementInteractor) => void
  styleMod?: LabelStyleMod
}

export interface LineElementSpec extends BaseElementSpec {
  type: "line"
  direction?: "horizontal" | "vertical"
  on_gui_click?: (event: OnGuiClickEvent) => void
  on_gui_opened?: (event: OnGuiOpenedEvent) => void
  on_gui_closed?: (event: OnGuiClosedEvent) => void
  onCreate?: (element: LineGuiElementMembers, interactor: ElementInteractor) => void
  styleMod?: BaseStyleMod
}

export interface MinimapElementSpec extends BaseElementSpec {
  type: "minimap"
  position?: MaybeObservable<MapPosition>
  surface_index?: MaybeObservable<SurfaceIndex>
  chart_player_index?: uint
  force?: MaybeObservable<string | undefined>
  zoom?: MaybeObservable<double>
  minimap_player_index?: MaybeObservable<uint>
  entity?: MaybeObservable<LuaEntity | undefined>
  on_gui_click?: (event: OnGuiClickEvent) => void
  on_gui_opened?: (event: OnGuiOpenedEvent) => void
  on_gui_closed?: (event: OnGuiClosedEvent) => void
  onCreate?: (element: MinimapGuiElementMembers, interactor: ElementInteractor) => void
  styleMod?: BaseStyleMod
}

export interface ProgressBarElementSpec extends BaseElementSpec {
  type: "progressbar"
  value?: MaybeObservable<double>
  on_gui_click?: (event: OnGuiClickEvent) => void
  on_gui_opened?: (event: OnGuiOpenedEvent) => void
  on_gui_closed?: (event: OnGuiClosedEvent) => void
  onCreate?: (element: ProgressBarGuiElementMembers, interactor: ElementInteractor) => void
  styleMod?: ProgressBarStyleMod
}

export interface RadioButtonElementSpec extends BaseElementSpec {
  type: "radiobutton"
  state: MaybeState<boolean>
  on_gui_click?: (event: OnGuiClickEvent) => void
  on_gui_opened?: (event: OnGuiOpenedEvent) => void
  on_gui_closed?: (event: OnGuiClosedEvent) => void
  onCreate?: (element: RadioButtonGuiElementMembers, interactor: ElementInteractor) => void
  styleMod?: BaseStyleMod
}

export interface SliderElementSpec extends BaseElementSpec {
  type: "slider"
  minimum_value?: MaybeObservable<double>
  maximum_value?: MaybeObservable<double>
  value_step?: MaybeObservable<double>
  discrete_slider?: MaybeObservable<double>
  discrete_values?: boolean
  slider_value?: MaybeState<double>
  discrete_value?: MaybeObservable<double>
  on_gui_click?: (event: OnGuiClickEvent) => void
  on_gui_opened?: (event: OnGuiOpenedEvent) => void
  on_gui_closed?: (event: OnGuiClosedEvent) => void
  onCreate?: (element: SliderGuiElementMembers, interactor: ElementInteractor) => void
  styleMod?: BaseStyleMod
}

export interface SpriteElementSpec extends BaseElementSpec {
  type: "sprite"
  sprite?: MaybeObservable<SpritePath>
  resize_to_sprite?: MaybeObservable<boolean>
  on_gui_click?: (event: OnGuiClickEvent) => void
  on_gui_opened?: (event: OnGuiOpenedEvent) => void
  on_gui_closed?: (event: OnGuiClosedEvent) => void
  onCreate?: (element: SpriteGuiElementMembers, interactor: ElementInteractor) => void
  styleMod?: SpriteStyleMod
}

export interface SwitchElementSpec extends BaseElementSpec {
  type: "switch"
  switch_state?: MaybeState<string>
  allow_none_state?: MaybeObservable<boolean>
  left_label_caption?: MaybeObservable<LocalisedString>
  left_label_tooltip?: MaybeObservable<LocalisedString>
  right_label_caption?: MaybeObservable<LocalisedString>
  right_label_tooltip?: MaybeObservable<LocalisedString>
  on_gui_click?: (event: OnGuiClickEvent) => void
  on_gui_opened?: (event: OnGuiOpenedEvent) => void
  on_gui_closed?: (event: OnGuiClosedEvent) => void
  onCreate?: (element: SwitchGuiElementMembers, interactor: ElementInteractor) => void
  styleMod?: BaseStyleMod
}

export interface TabElementSpec extends BaseElementSpec {
  type: "tab"
  badge_text?: MaybeObservable<LocalisedString>
  on_gui_click?: (event: OnGuiClickEvent) => void
  on_gui_opened?: (event: OnGuiOpenedEvent) => void
  on_gui_closed?: (event: OnGuiClosedEvent) => void
  onCreate?: (element: TabGuiElementMembers, interactor: ElementInteractor) => void
  styleMod?: TabStyleMod
}

export interface TableElementSpec extends BaseElementSpec {
  type: "table"
  column_count: uint
  draw_vertical_lines?: MaybeObservable<boolean>
  draw_horizontal_lines?: MaybeObservable<boolean>
  draw_horizontal_line_after_headers?: MaybeObservable<boolean>
  vertical_centering?: MaybeObservable<boolean>
  drag_target?: MaybeObservable<LuaGuiElement | undefined>
  on_gui_click?: (event: OnGuiClickEvent) => void
  on_gui_opened?: (event: OnGuiOpenedEvent) => void
  on_gui_closed?: (event: OnGuiClosedEvent) => void
  onCreate?: (element: TableGuiElementMembers, interactor: ElementInteractor) => void
  styleMod?: TableStyleMod
}

export interface TextFieldElementSpec extends BaseElementSpec {
  type: "textfield"
  text?: MaybeState<string>
  numeric?: MaybeObservable<boolean>
  allow_decimal?: MaybeObservable<boolean>
  allow_negative?: MaybeObservable<boolean>
  is_password?: MaybeObservable<boolean>
  lose_focus_on_confirm?: MaybeObservable<boolean>
  clear_and_focus_on_right_click?: MaybeObservable<boolean>
  on_gui_click?: (event: OnGuiClickEvent) => void
  on_gui_confirmed?: (event: OnGuiConfirmedEvent) => void
  on_gui_opened?: (event: OnGuiOpenedEvent) => void
  on_gui_closed?: (event: OnGuiClosedEvent) => void
  onCreate?: (element: TextFieldGuiElementMembers, interactor: ElementInteractor) => void
  styleMod?: TextFieldStyleMod
}

export type ElementSpec =
  | ChooseElemButtonElementSpec
  | DropDownElementSpec
  | EmptyWidgetElementSpec
  | EntityPreviewElementSpec
  | ListBoxElementSpec
  | ScrollPaneElementSpec
  | SpriteButtonElementSpec
  | TabbedPaneElementSpec
  | TextBoxElementSpec
  | ButtonElementSpec
  | CameraElementSpec
  | CheckboxElementSpec
  | FlowElementSpec
  | FrameElementSpec
  | LabelElementSpec
  | LineElementSpec
  | MinimapElementSpec
  | ProgressBarElementSpec
  | RadioButtonElementSpec
  | SliderElementSpec
  | SpriteElementSpec
  | SwitchElementSpec
  | TabElementSpec
  | TableElementSpec
  | TextFieldElementSpec

export interface BaseStyleMod {
  minimal_width?: MaybeObservable<int>
  maximal_width?: MaybeObservable<int>
  minimal_height?: MaybeObservable<int>
  maximal_height?: MaybeObservable<int>
  natural_width?: MaybeObservable<int>
  natural_height?: MaybeObservable<int>
  top_padding?: MaybeObservable<int>
  right_padding?: MaybeObservable<int>
  bottom_padding?: MaybeObservable<int>
  left_padding?: MaybeObservable<int>
  top_margin?: MaybeObservable<int>
  right_margin?: MaybeObservable<int>
  bottom_margin?: MaybeObservable<int>
  left_margin?: MaybeObservable<int>
  horizontal_align?: MaybeObservable<"left" | "center" | "right">
  vertical_align?: MaybeObservable<"top" | "center" | "bottom">
  font_color?: MaybeObservable<Color>
  font?: MaybeObservable<string>
  horizontally_stretchable?: MaybeObservable<boolean>
  vertically_stretchable?: MaybeObservable<boolean>
  horizontally_squashable?: MaybeObservable<boolean>
  vertically_squashable?: MaybeObservable<boolean>
  width?: MaybeObservable<int>
  height?: MaybeObservable<int>
  size?: MaybeObservable<int | SizeArray>
  padding?: MaybeObservable<int | StyleValuesArray>
  margin?: MaybeObservable<int | StyleValuesArray>
}

export interface ScrollPaneStyleMod extends BaseStyleMod {
  extra_top_padding_when_activated?: MaybeObservable<int>
  extra_bottom_padding_when_activated?: MaybeObservable<int>
  extra_left_padding_when_activated?: MaybeObservable<int>
  extra_right_padding_when_activated?: MaybeObservable<int>
  extra_top_margin_when_activated?: MaybeObservable<int>
  extra_bottom_margin_when_activated?: MaybeObservable<int>
  extra_left_margin_when_activated?: MaybeObservable<int>
  extra_right_margin_when_activated?: MaybeObservable<int>
  extra_padding_when_activated?: MaybeObservable<int | StyleValuesArray>
  extra_margin_when_activated?: MaybeObservable<int | StyleValuesArray>
}

export interface TabbedPaneStyleMod extends BaseStyleMod {
  vertical_spacing?: MaybeObservable<int>
}

export interface TextBoxStyleMod extends BaseStyleMod {
  rich_text_setting?: MaybeObservable<defines.rich_text_setting>
}

export interface ButtonStyleMod extends BaseStyleMod {
  hovered_font_color?: MaybeObservable<Color>
  clicked_font_color?: MaybeObservable<Color>
  disabled_font_color?: MaybeObservable<Color>
  pie_progress_color?: MaybeObservable<Color>
  clicked_vertical_offset?: MaybeObservable<int>
  selected_font_color?: MaybeObservable<Color>
  selected_hovered_font_color?: MaybeObservable<Color>
  selected_clicked_font_color?: MaybeObservable<Color>
  strikethrough_color?: MaybeObservable<Color>
}

export interface FlowStyleMod extends BaseStyleMod {
  horizontal_spacing?: MaybeObservable<int>
  vertical_spacing?: MaybeObservable<int>
}

export interface FrameStyleMod extends BaseStyleMod {
  use_header_filler?: MaybeObservable<boolean>
}

export interface LabelStyleMod extends BaseStyleMod {
  rich_text_setting?: MaybeObservable<defines.rich_text_setting>
  single_line?: MaybeObservable<boolean>
}

export interface ProgressBarStyleMod extends BaseStyleMod {
  bar_width?: MaybeObservable<uint>
  color?: MaybeObservable<Color>
}

export interface SpriteStyleMod extends BaseStyleMod {
  stretch_image_to_widget_size?: MaybeObservable<boolean>
}

export interface TabStyleMod extends BaseStyleMod {
  disabled_font_color?: MaybeObservable<Color>
  badge_font?: MaybeObservable<string>
  badge_horizontal_spacing?: MaybeObservable<int>
  default_badge_font_color?: MaybeObservable<Color>
  selected_badge_font_color?: MaybeObservable<Color>
  disabled_badge_font_color?: MaybeObservable<Color>
}

export interface TableStyleMod extends BaseStyleMod {
  top_cell_padding?: MaybeObservable<int>
  right_cell_padding?: MaybeObservable<int>
  bottom_cell_padding?: MaybeObservable<int>
  left_cell_padding?: MaybeObservable<int>
  horizontal_spacing?: MaybeObservable<int>
  vertical_spacing?: MaybeObservable<int>
  cell_padding?: MaybeObservable<int>
}

export interface TextFieldStyleMod extends BaseStyleMod {
  rich_text_setting?: MaybeObservable<defines.rich_text_setting>
}
